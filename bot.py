import os
import aiohttp
import mysql.connector
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import MenuButtonCommands, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from flask import Flask
from threading import Thread

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TOKEN")
SELF_PING_URL = os.getenv("SELF_PING_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
def get_db_connection():
    return mysql.connector.connect(
        host=os.getenv("DB_HOST"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME"),
        port=int(os.getenv("DB_PORT"))
    )

''' 
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∏ —é–º–æ—Ä–∫–ª—É–±–∞", callback_data="show_girls")]
    ])
    await message.answer()#("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
'''
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!"

async def on_startup():
    await set_bot_commands(bot)
    await set_menu_button(bot)

async def set_menu_button(bot: Bot):
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="girls", description="–î–µ–≤—É—à–∫–∏ —é–º–æ—Ä–∫–ª—É–±–∞")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

# –§—É–Ω–∫—Ü–∏—è self-ping, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
async def keep_awake():
    while True:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(SELF_PING_URL) as response:
                    print(f"Self-ping: {response.status}")
            except Exception as e:
                print(f"Self-ping error: {e}")
        await asyncio.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–µ–≤—É—à–∫–∏ —é–º–æ—Ä–∫–ª—É–±–∞"
#@dp.callback_query(lambda c: c.data == "show_girls")
@dp.message(Command('girls'))
@dp.message(Command('start'))
async def show_girls(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT GirlID, Name FROM girls")
    girls = cursor.fetchall()

    girls.sort(key=lambda x: x['Name'])

    keyboard = InlineKeyboardBuilder()
    for girl in girls:
        keyboard.button(text=girl['Name'], callback_data=f"show_info_{girl['GirlID']}")

    keyboard.adjust(2)
    keyboard = keyboard.as_markup()

    await bot.send_message(message.chat.id, "–ù–∞—à–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –¥–µ–≤—É—à–∫–∏:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("show_info_"))
async def show_girl_info(callback_query: CallbackQuery):
    girl_id = callback_query.data.split("_")[2]

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT * FROM girls WHERE GirlID = %s", (girl_id,))
    girl = cursor.fetchone()

    if girl:
        cursor.execute("""
            SELECT f.Name 
            FROM flowers f 
            JOIN girlflowers gf ON gf.FlowerID = f.FlowerID 
            WHERE gf.GirlID = %s
        """, (girl_id,))
        flowers = cursor.fetchall()

        cursor.execute("""
            SELECT s.Name 
            FROM sweets s 
            JOIN girlsweets gs ON gs.SweetID = s.SweetID 
            WHERE gs.GirlID = %s
        """, (girl_id,))
        sweets = cursor.fetchall()

        cursor.execute("""
            SELECT fr.Name 
            FROM fruits fr 
            JOIN girlfruits gf ON gf.FruitID = fr.FruitID 
            WHERE gf.GirlID = %s
        """, (girl_id,))
        fruits = cursor.fetchall()

        info = f"<b>üíñ {girl['Name']} üíñ</b>\n\n"

        info += f"<b>üå∏ –õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã:</b> " + (", ".join(
            [flower['Name'] for flower in flowers]) if flowers else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤.") + "\n"

        info += f"<b>üç¨ –õ—é–±–∏–º—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏:</b> " + (", ".join(
            [sweet['Name'] for sweet in sweets]) if sweets else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Å–ª–∞–¥–æ—Å—Ç–µ–π.") + "\n"

        info += f"<b>üçé –õ—é–±–∏–º—ã–µ —Ñ—Ä—É–∫—Ç—ã/—è–≥–æ–¥—ã:</b> " + (", ".join(
            [fruit['Name'] for fruit in fruits]) if fruits else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤.") + "\n\n"

        info += f"<i>üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i> {girl['Info']}" if girl['Info'] != None else ""

        await bot.send_message(callback_query.from_user.id, info, parse_mode="HTML")
    else:
        await bot.send_message(callback_query.from_user.id, "–î–µ–≤—É—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start_polling():
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.create_task(keep_awake())
        await on_startup()
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def run_flask():
    app.run(host="0.0.0.0", port=5000)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç Flask –∏ –±–æ—Ç
def run():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=run_flask)
    thread.daemon = True
    thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(start_polling())


if __name__ == "__main__":
    run()
