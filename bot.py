import os
import mysql.connector
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",  # –ó–¥–µ—Å—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ö–æ—Å—Ç
        user="root",  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        password="1234",  # –ü–∞—Ä–æ–ª—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database="girlflowerdb",  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    )

''' 
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∏ —é–º–æ—Ä–∫–ª—É–±–∞", callback_data="show_girls")]
    ])
    await message.answer()#("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
'''

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–µ–≤—É—à–∫–∏ —é–º–æ—Ä–∫–ª—É–±–∞"
@dp.callback_query(lambda c: c.data == "show_girls")
@dp.message(Command('start'))
async def show_girls(callback_query: CallbackQuery):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT GirlID, Name FROM Girls")
    girls = cursor.fetchall()

    girls.sort(key=lambda x: x['Name'])

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ –¥–µ–≤—É—à–µ–∫
    keyboard = InlineKeyboardBuilder()
    for girl in girls:
        keyboard.button(text=girl['Name'], callback_data=f"show_info_{girl['GirlID']}")

    keyboard.adjust(2)
    keyboard = keyboard.as_markup()

    await bot.send_message(callback_query.from_user.id, "–ù–∞—à–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –¥–µ–≤—É—à–∫–∏:", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ–≤—É—à–∫–∏
@dp.callback_query(lambda c: c.data.startswith("show_info_"))
async def show_girl_info(callback_query: CallbackQuery):
    girl_id = callback_query.data.split("_")[2]

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–≤—É—à–∫–µ
    cursor.execute("SELECT * FROM Girls WHERE GirlID = %s", (girl_id,))
    girl = cursor.fetchone()

    if girl:
        # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã, —Å–ª–∞–¥–æ—Å—Ç–∏ –∏ —Ñ—Ä—É–∫—Ç—ã
        cursor.execute("""
            SELECT f.Name 
            FROM Flowers f 
            JOIN GirlFlowers gf ON gf.FlowerID = f.FlowerID 
            WHERE gf.GirlID = %s
        """, (girl_id,))
        flowers = cursor.fetchall()

        cursor.execute("""
            SELECT s.Name 
            FROM Sweets s 
            JOIN GirlSweets gs ON gs.SweetID = s.SweetID 
            WHERE gs.GirlID = %s
        """, (girl_id,))
        sweets = cursor.fetchall()

        cursor.execute("""
            SELECT fr.Name 
            FROM Fruits fr 
            JOIN GirlFruits gf ON gf.FruitID = fr.FruitID 
            WHERE gf.GirlID = %s
        """, (girl_id,))
        fruits = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = f"<b>üíñ {girl['Name']} üíñ</b>\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã
        info += f"<b>üå∏ –õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç—ã:</b> " + (", ".join(
            [flower['Name'] for flower in flowers]) if flowers else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤.") + "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±–∏–º—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏
        info += f"<b>üç¨ –õ—é–±–∏–º—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏:</b> " + (", ".join(
            [sweet['Name'] for sweet in sweets]) if sweets else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Å–ª–∞–¥–æ—Å—Ç–µ–π.") + "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±–∏–º—ã–µ —Ñ—Ä—É–∫—Ç—ã
        info += f"<b>üçé –õ—é–±–∏–º—ã–µ —Ñ—Ä—É–∫—Ç—ã/—è–≥–æ–¥—ã:</b> " + (", ".join(
            [fruit['Name'] for fruit in fruits]) if fruits else "–ù–µ—Ç –ª—é–±–∏–º—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤.") + "\n\n"

        info += f"<i>üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i> {girl['Info']}" if girl['Info']!=None else ""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(callback_query.from_user.id, info, parse_mode="HTML")
    else:
        await bot.send_message(callback_query.from_user.id, "–î–µ–≤—É—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.close()


if __name__ == "__main__":
    asyncio.run(main())
